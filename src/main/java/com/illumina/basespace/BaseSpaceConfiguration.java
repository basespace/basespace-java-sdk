/**
* Copyright 2012 Illumina
* 
 * Licensed under the Apache License, Version 2.0 (the "License");
*  you may not use this file except in compliance with the License.
*  You may obtain a copy of the License at
*    http://www.apache.org/licenses/LICENSE-2.0
* 
 *  Unless required by applicable law or agreed to in writing, software
*  distributed under the License is distributed on an "AS IS" BASIS,
*  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
*  See the License for the specific language governing permissions and
*  limitations under the License.
*/

package com.illumina.basespace;

/**
 * Configuration information for a BaseSpace session. These values are necessary to perform
 * authentication and form the URIs necessary to communicate with BaseSpace via REST API
 * @author bking
 *
 */
public interface BaseSpaceConfiguration
{
    /**
     * Get the desired version of BaseSpace to operate against
     * @return the version of BaseSpace 
     */
    public String getVersion();
 
    /**
     * Get the client ID generated by BaseSpace for an application 
     * @return the client id
     */
    public String getClientId();
   
    /**
     * Get the client secret for the client ID 
     * @return the client secret
     */
    public String getClientSecret();
   
    /**
     * Get the root URI for the BaseSpace API
     * @return the API root URI
     */
    public String getApiRootUri();
   
    /**
     * Get the URI fragment for requesting an access token
     * @return access token fragment URI
     */
    public String getAccessTokenUriFragment();
    
    /**
     * Get the desired authorization scope of the session
     * @return the authorization scope
     */
    public String getAuthorizationScope();
    
    /**
     * Get the name of the proxy host for BaseSpace requests
     * @return the name of the proxy host, or null if not using a proxy
     */
    public String getProxyHost();
    
    /**
     * Get the proxy port 
     * @return the proxy port if applicable
     */
    public int getProxyPort();
    
    /**
     * Get the URI fragment for requesting authorization code
     * @return authorization fragment URI
     */
    public String getAuthorizationUriFragment();
    
    /**
     * Allows for pre-authorization. If present, SDK will not initiate OAuth workflow for obtaining an access token
     * @return the access token the SDK should use for the session
     */
    public String getAccessToken();
    
    
    /**
     * Get the read timeout interval, in milliseconds, of the underlying connection to the API. 
     * A (zero) 0 value indicates a timeout of infinity
     * @return the read timeout, in milliseconds
     */
    public int getReadTimeout();
    
    /**
     * Get the connection timeout interval, in milliseconds, of the underlying connection to the API.
     * A (zero) 0 value indicates a timeout of infinity
     * @return the connection timeout, in milliseconds
     */
    public int getConnectionTimeout();
}
